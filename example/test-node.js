// Teste do SDK em ambiente Node.js
import { Veritas, init, createHmac, verifyHmac } from '../dist/veritas-sdk.esm.js';
import 'crypto';

console.log('üîí Testando SDK Antifraude em Node.js\n');

// Teste 1: Inicializa√ß√£o b√°sica
console.log('1. Testando inicializa√ß√£o b√°sica...');
try {
    const sdk = new Veritas();

    sdk.configure({
        endpoint: 'http://localhost:3000/identity/verify',
        secret: 'test-secret-key',
        debug: true,
        autoCollect: false // Desabilitar coleta autom√°tica no servidor
    });
    console.log('‚úÖ SDK inicializado com sucesso');


    // Teste 2: Coleta de dados (n√£o aplic√°vel no Node.js por enquanto)
    //console.log('\n2. Testando coleta de dados...');
    //const data = sdk.collect();
    //console.log('‚úÖ Dados coletados:', JSON.stringify(data, null, 2));


    // Teste 3: Configura√ß√£o
    console.log('\n3. Testando reconfigura√ß√£o...');
    sdk.configure({
        timeout: 10000,
        retries: 3
    });
    console.log('‚úÖ SDK reconfigurado');


    // Teste 4: Destrui√ß√£o
    console.log('\n4. Testando destrui√ß√£o...');
    sdk.destroy();
    console.log('‚úÖ SDK destru√≠do');


} catch (error) {
    console.error('‚ùå Erro no teste:', error.message);
}

// Teste 5: Fun√ß√£o de conveni√™ncia
console.log('\n5. Testando fun√ß√£o init...');
try {
    const sdk2 = init({
        endpoint: 'http://localhost:3000/identity/verify',
        debug: true,
        autoCollect: false
    });
    console.log('‚úÖ init funcionou');

    sdk2.destroy();
} catch (error) {
    console.error('‚ùå Erro no init:', error.message);
}

// Teste 6: Importa√ß√£o de m√≥dulos espec√≠ficos
console.log('\n6. Testando importa√ß√µes espec√≠ficas...');
try {
    
    // Teste 7: Testar HMAC
    createHmac('test message', 'secret').then(signature => {
        console.log('‚úÖ HMAC criado:', signature);
        
        // Teste 8: Verificar HMAC
        verifyHmac('test message', signature, 'secret').then(isValid => {
            console.log('‚úÖ HMAC verificado:', isValid);
        });
    });
    console.log('‚úÖ M√≥dulo crypt importado');

} catch (error) {
    console.error('‚ùå Erro na importa√ß√£o:', error.message);
}

